###########################################################################################################
# Playbook: Initial Server Setup for the Reaction Platform on a Ubuntu 18.4 Digital Ocean Droplet.
# This playbook will also configure and docker-compose based deployment of the Reaction platform.
###################################################################################################################

---
- hosts: all
  remote_user: root
  gather_facts: true
  vars:
    do_auth_token: "3c2c54a4407304f27362d3ee31058b6132e875810e06b00aeb4c08f2cc941c81"
    domain: "ankurpata.com"
    email: "ankur.pata@gmail.com"
    create_user: reaction
    copy_local_key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
    docker_compose_version: "1.25.4"
    nodejs_version: "12.x"
    proxy_dir: proxy
    proxy_path: "/home/{{ create_user }}/{{ proxy_dir }}"
    dev_api_plugin_path: "/home/{{create_user}}/plugins"
    reaction_dir: reaction-development-platform
    plugins: plugins
    reaction_platform_path: "/home/{{create_user}}/{{reaction_dir}}"
    acme_json_path: "/home/ankur/media/certs/acme.json"
    traefik_admin_user: reaction
    traefik_path: "/home/{{ create_user }}/{{ proxy_dir }}/traefik"

  tasks:
    - name: "Stop all Reaction development platform containers"
      command: make stop
      args:
        chdir: "{{ reaction_platform_path }}"

    - name: "Replace plugins path in docker-compose-dev for Reaction"
      replace:
        path: "/home/{{create_user}}/{{reaction_dir}}/reaction/docker-compose.dev.yml"
        regexp: "DEV_API_PLUGIN"
        replace: "{{ dev_api_plugin_path }}"

    - name: Create Docker network named web
      command: docker network create web

    - name: Create Docker network named internal
      command: docker network create internal

    - name: "Set DO in Traefik's docker-compose.yml"
      replace:
        path: "{{ traefik_path}}/docker-compose.yml"
        regexp: "YOUR_DIGITALOCEAN_AUTH_TOKEN"
        replace: "{{ do_auth_token }}"

    - name: "Set config files path in Traefik's docker-compose.yml"
      replace:
        path: "{{ traefik_path}}/docker-compose.yml"
        regexp: "TRAEFIK_PATH"
        replace: "{{ traefik_path }}"

    - name: "Set the desired domain in Traefik's docker-compose.yml"
      replace:
        path: "{{ traefik_path}}/docker-compose.yml"
        regexp: "example.com"
        replace: "{{ domain }}"

    - name: "Set the email in Traefik's config file"
      replace:
        path: "{{ traefik_path}}/traefik.yml"
        regexp: "YOUR_EMAIL"
        replace: "{{ email }}"

    - name: "Set the domain in Traefik's config file"
      replace:
        path: "{{ traefik_path}}/traefik.yml"
        regexp: "YOUR_DOMAIN"
        replace: "{{ domain }}"

    - name: "Set correct permissions on traefik.yml"
      file:
        path: "{{ traefik_path}}/traefik.yml"
        mode: "600"

    - name: Copy acme.json cert file from media certs
      copy:
        src: "{{ acme_json_path }}"
        dest: "{{ traefik_path}}/acme.json"

    - name: "Set correct permissions on acme.json"
      file:
        path: "{{ traefik_path}}/acme.json"
        mode: "600"

    - name: "Start Traefik"
      command: "docker-compose up -d"
      args:
        chdir: "{{ traefik_path }}"

    - name: "Copy docker-compose.override.yml files"
      copy:
        src: "{{ item.file_src }}"
        dest: "{{ item.file_dest }}"
        remote_src: yes
        owner: "{{ create_user }}"
        group: "{{ create_user }}"
        mode: "0644"
      loop:
        - {
            file_src: "{{ proxy_path }}/reaction/docker-compose.override.yml",
            file_dest: "{{ reaction_platform_path }}/reaction",
          }
        - {
            file_src: "{{ proxy_path }}/example-storefront/docker-compose.override.yml",
            file_dest: "{{ reaction_platform_path }}/example-storefront",
          }
        - {
            file_src: "{{ proxy_path }}/reaction-admin/docker-compose.override.yml",
            file_dest: "{{ reaction_platform_path }}/reaction-admin",
          }
        - {
            file_src: "{{ proxy_path }}/reaction-hydra/docker-compose.override.yml",
            file_dest: "{{ reaction_platform_path }}/reaction-hydra",
          }
        - {
            file_src: "{{ proxy_path }}/reaction-identity/docker-compose.override.yml",
            file_dest: "{{ reaction_platform_path }}/reaction-identity",
          }

    - name: "Set the desired domain in all docker-compose.override.yml files"
      replace:
        path: "{{ item }}"
        regexp: "example.com"
        replace: "{{ domain }}"
      loop:
        - "{{ reaction_platform_path }}/reaction/docker-compose.override.yml"
        - "{{ reaction_platform_path }}/example-storefront/docker-compose.override.yml"
        - "{{ reaction_platform_path }}/reaction-admin/docker-compose.override.yml"
        - "{{ reaction_platform_path }}/reaction-hydra/docker-compose.override.yml"
        - "{{ reaction_platform_path }}/reaction-identity/docker-compose.override.yml"

    - name: "Set Reaction's environment variables"
      lineinfile:
        path: "{{ reaction_platform_path }}/reaction/.env"
        regexp: "^ROOT_URL"
        line: "ROOT_URL=https://api.{{ domain }}"

    - name: "Set the example storefront's environment variables"
      lineinfile:
        path: "{{ reaction_platform_path }}/example-storefront/.env"
        regexp: "^{{ item.variable }}"
        line: "{{ item.variable }}={{ item.value }}"
      loop:
        - {
            variable: "CANONICAL_URL",
            value: "https://storefront.{{ domain }}",
          }
        - {
            variable: "EXTERNAL_GRAPHQL_URL",
            value: "https://api.{{ domain }}/graphql",
          }
        - {
            variable: "OAUTH2_AUTH_URL",
            value: "https://hydra.{{ domain }}/oauth2/auth",
          }
        - {
            variable: "OAUTH2_IDP_HOST_URL",
            value: "https://identity.{{ domain }}",
          }
        - {
            variable: "OAUTH2_REDIRECT_URL",
            value: "https://storefront.{{ domain }}/callback",
          }
        - {
            variable: "OAUTH2_TOKEN_URL",
            value: "https://hydra.{{ domain }}/oauth2/token",
          }
        - {
            variable: "OAUTH2_PUBLIC_LOGOUT_URL",
            value: "https://hydra.{{ domain }}/oauth2/sessions/logout",
          }
        - {
            variable: "OAUTH2_IDP_PUBLIC_CHANGE_PASSWORD_URL",
            value: "https://identity.{{ domain }}/account/change-password?email=EMAIL&from=FROM",
          }

    - name: "Set Hydra's environment variables"
      lineinfile:
        path: "{{ reaction_platform_path }}/reaction-hydra/.env"
        regexp: "^{{ item.variable }}"
        line: "{{ item.variable }}={{ item.value }}"
      loop:
        - {
            variable: "URLS_CONSENT",
            value: "https://identity.{{ domain }}/consent",
          }
        - {
            variable: "URLS_SELF_ISSUER",
            value: "https://hydra.{{ domain }}"
          }
        - {
            variable: "URLS_LOGIN",
            value: "https://identity.{{ domain }}/login",
          }
        - {
            variable: "URLS_ERROR",
            value: "https://identity.{{ domain }}/account/oauth-error",
          }
        - {
            variable: "URLS_LOGOUT",
            value: "https://identity.{{ domain }}/logout",
          }
        - {
            variable: "SERVE_PUBLIC_CORS_ALLOWED_ORIGINS",
            value: "https://admin.{{ domain }}",
          }

    - name: "Set the Reaction identity service environment variables"
      lineinfile:
        path: "{{ reaction_platform_path }}/reaction-identity/.env"
        regexp: "^{{ item.variable }}"
        line: "{{ item.variable }}={{ item.value }}"
      loop:
        - {
            variable: "ROOT_URL",
            value: "https://identity.{{ domain }}",
          }
        - {
            variable: "API_URL",
            value: "https://api.{{ domain }}/graphql",
          }
        - {
            variable: "HYDRA_TOKEN_URL",
            value: "https://hydra.{{ domain }}/oauth2/token"
          }
        - {
            variable: "OAUTH2_CLIENT_DOMAINS",
            value: "https://storefront.{{ domain }}"
          }

    - name: "Set the Reaction admin UI service environment variables"
      lineinfile:
        path: "{{ reaction_platform_path }}/reaction-admin/.env"
        regexp: "^{{ item.variable }}"
        line: "{{ item.variable }}={{ item.value }}"
      loop:
        - {
            variable: "ROOT_URL",
            value: "https://admin.{{ domain }}",
          }
        - {
            variable: "PUBLIC_STOREFRONT_HOME_URL",
            value: "https://storefront.{{ domain }}",
          }
        - {
            variable: "PUBLIC_I18N_BASE_URL",
            value: "https://api.{{ domain }}"
          }
        - {
            variable: "PUBLIC_FILES_BASE_URL",
            value: "https://api.{{ domain }}"
          }
        - {
            variable: "PUBLIC_GRAPHQL_API_URL_WS",
            value: "wss://api.{{ domain }}/graphql"
          }
        - {
            variable: "PUBLIC_GRAPHQL_API_URL_HTTP",
            value: "https://api.{{ domain }}/graphql"
          }
        - {
            variable: "OAUTH2_PUBLIC_URL",
            value: "https://hydra.{{ domain }}"
          }
        - {
            variable: "OAUTH2_IDP_PUBLIC_CHANGE_PASSWORD_URL",
            value: "https://identity.{{ domain }}/account/change-password?email=EMAIL&from=FROM"
          }

    - name: "Remove all Reaction Platform containers"
      command: make rm
      args:
        chdir: "{{ reaction_platform_path }}"

    - name: "Start all Reaction Platform containers"
      command: make start
      args:
        chdir: "{{ reaction_platform_path }}"

    - name: Download Lazydocker
      get_url:
        url: https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh
        dest: /tmp

    - name: Install Lazydocker
      command: bash /tmp/install_update_linux.sh

    - name: Add Docker Compose aliases
      blockinfile:
        path: "/home/{{ create_user }}/.bashrc"
        block: |
          alias dc='docker-compose'
          # Bring all services down
          alias dcd='docker-compose down'
          # Attach to all logs of all services
          alias dcl='docker-compose logs -f'
          # Run a comand inside a running container
          alias dcr='docker-compose run --rm'
          # "Restart" all services
          alias dcre='docker-compose down && docker-compose up -d && docker-compose logs -f'
          # Bring all services up in daemon mode
          alias dcu='docker-compose up -d'
          # Bring all containers up and attach to their logs
          alias dcul='docker-compose up -d && docker-compose logs -f'
          # Remove exited containers
          alias dprune='docker ps -aq --no-trunc -f status=exited | xargs docker rm'
          # Show all running containers, with horizontal paging
          alias dps='docker ps -a | less -S'

    - name: "Source .bashrc"
      shell: "source /home/{{ create_user }}/.bashrc"
      args:
        executable: /bin/bash
